//
// Copyright (c) 2022 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//
//#![feature(async_closure)]

use async_trait::async_trait;
use std::sync::{
    atomic::{AtomicUsize, Ordering},
    Arc,
};
use zenoh_flow::{bail, prelude::*};
use zenoh_flow_example_types::ZFUsize;

#[derive(Debug)]
struct SumAndSend;

static INPUT: &str = "Number";
static OUTPUT: &str = "Sum";

#[async_trait]
impl Operator for SumAndSend {
    async fn setup(
        &self,
        _context: &mut Context,
        _configuration: &Option<Configuration>,
        mut inputs: Inputs,
        mut outputs: Outputs,
    ) -> Result<Option<Box<dyn AsyncIteration>>> {
        // let mut state = SumAndSendState { x: ZFUsize(0) };

        let input = inputs.take_into_arc(INPUT).unwrap();
        let output = outputs.take_into_arc(OUTPUT).unwrap();
        let state = Arc::new(AtomicUsize::new(0));

        Ok(Some(Box::new(move || {
            let state = Arc::clone(&state);
            let input = Arc::clone(&input);
            let output = Arc::clone(&output);

            async move {
                let data = if let Message::Data(mut message) = input.recv_async().await.unwrap() {
                    message.get_inner_data().try_get::<ZFUsize>()?.clone()
                } else {
                    bail!(ErrorKind::Empty, "No data")
                };

                state.fetch_add(data.0, Ordering::AcqRel);
                let data = Data::from(ZFUsize(state.load(Ordering::Acquire)));

                output.send_async(data, None).await
            }
        })))
    }
}

// Also generated by macro
zenoh_flow::export_operator!(register);

fn register() -> Result<Arc<dyn Operator>> {
    Ok(Arc::new(SumAndSend) as Arc<dyn Operator>)
}
