//
// Copyright (c) 2022 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//
//#![feature(async_closure)]

use async_std::sync::Mutex;
use async_trait::async_trait;
use opencv::{core, prelude::*, videoio};
use std::sync::Arc;
use zenoh_flow::prelude::*;

struct CameraSource {
    output: Output,
    state: Arc<Mutex<CameraState>>
}

struct CameraState {
    pub camera: videoio::VideoCapture,
    pub encode_options: opencv::types::VectorOfi32,
    pub resolution: (i32, i32),
    pub delay: u64,
}

// because of opencv
impl std::fmt::Debug for CameraState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(
            f,
            "CameraState: resolution:{:?} delay:{:?}",
            self.resolution, self.delay
        )
    }
}

impl CameraState {
    fn new(configuration: &Option<Configuration>) -> Self {
        let (camera, resolution, delay) = match configuration {
            Some(configuration) => {
                let camera = match configuration["camera"].as_str() {
                    Some(configured_camera) => {
                        videoio::VideoCapture::from_file(configured_camera, videoio::CAP_ANY)
                            .unwrap()
                    }
                    None => videoio::VideoCapture::new(0, videoio::CAP_ANY).unwrap(),
                };

                let configured_resolution = match configuration["resolution"].as_str() {
                    Some(res) => {
                        let v = res.split('x').collect::<Vec<&str>>();
                        (v[0].parse::<i32>().unwrap(), v[1].parse::<i32>().unwrap())
                    }
                    None => (800, 600),
                };

                let delay = match configuration["fps"].as_f64() {
                    Some(fps) => {
                        let delay: f64 = 1f64 / fps;
                        (delay * 1000f64) as u64
                    }
                    None => 40,
                };

                (camera, configured_resolution, delay)
            }

            None => (
                (videoio::VideoCapture::new(0, videoio::CAP_ANY).unwrap()),
                (800, 600),
                40,
            ),
        };

        let opened = videoio::VideoCapture::is_opened(&camera).unwrap();
        if !opened {
            panic!("Unable to open default camera!");
        }
        let encode_options = opencv::types::VectorOfi32::new();

        Self {
            camera,
            encode_options,
            resolution,
            delay,
        }
    }

    pub fn get_frame(&mut self) -> Vec<u8> {
        let mut frame = core::Mat::default();
        self.camera.read(&mut frame).unwrap();

        let mut reduced = Mat::default();
        opencv::imgproc::resize(
            &frame,
            &mut reduced,
            opencv::core::Size::new(self.resolution.0, self.resolution.1),
            0.0,
            0.0,
            opencv::imgproc::INTER_LINEAR,
        )
        .unwrap();

        let mut buf = opencv::types::VectorOfu8::new();
        opencv::imgcodecs::imencode(".jpg", &reduced, &mut buf, &self.encode_options).unwrap();

        buf.into()
    }
}

#[async_trait]
impl Node for CameraSource {
    async fn iteration(&self) -> Result<()> {
        let mut state = self.state.lock().await;
        self.output.send_async(Data::from(state.get_frame()), None).await.unwrap();
        async_std::task::sleep(std::time::Duration::from_millis(state.delay)).await;
        Ok(())
    }
}

struct CameraSourceFactory;

#[async_trait]
impl SourceFactoryTrait for CameraSourceFactory {
    async fn new_source(
        &self,
        _context: &mut Context,
        configuration: &Option<Configuration>,
        mut outputs: Outputs,
    ) -> Result<Option<Arc<dyn Node>>> {
        let output = outputs
            .take("Frame")
            .ok_or_else(|| zferror!(ErrorKind::NotFound))?;
        let state = Arc::new(Mutex::new(CameraState::new(configuration)));
        Ok(Some(Arc::new(CameraSource { output, state })))
    }
}

// Also generated by macro
export_source_factory!(register);

fn register() -> Result<Arc<dyn SourceFactoryTrait>> {
    Ok(Arc::new(CameraSourceFactory) as Arc<dyn SourceFactoryTrait>)
}
