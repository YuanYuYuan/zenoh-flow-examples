//
// Copyright (c) 2022 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//

use async_trait::async_trait;
use std::sync::Arc;
use zenoh_flow::prelude::*;
use zenoh_flow_example_types::ZFUsize;

#[derive(Debug)]
struct ExampleRandomSource;

#[async_trait]
impl Source for ExampleRandomSource {
    async fn setup(
        &self,
        _context: &mut Context,
        _configuration: &Option<Configuration>,
        mut outputs: Outputs,
    ) -> Result<Option<Box<dyn AsyncIteration>>> {
        let output = outputs.take_into_arc("Random").unwrap();

        Ok(Some(Box::new(move || {
            let output = Arc::clone(&output);

            async move {
                async_std::task::sleep(std::time::Duration::from_secs(1)).await;
                output
                    .send_async(Data::from(ZFUsize(rand::random::<usize>())), None)
                    .await
            }
        })))
    }
}

// Also generated by macro
zenoh_flow::export_source!(register);

fn register() -> Result<Arc<dyn Source>> {
    Ok(Arc::new(ExampleRandomSource) as Arc<dyn Source>)
}
