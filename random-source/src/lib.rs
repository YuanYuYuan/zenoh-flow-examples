//
// Copyright (c) 2022 ZettaScale Technology
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
//

use async_trait::async_trait;
use std::sync::Arc;
use zenoh_flow::prelude::*;
use zenoh_flow_example_types::ZFUsize;

struct ExampleRandomSource {
    output: Output,
}

#[async_trait]
impl Node for ExampleRandomSource {
    async fn iteration(&self) -> Result<()> {
        async_std::task::sleep(std::time::Duration::from_secs(1)).await;
        self.output
            .send_async(Data::from(ZFUsize(rand::random::<usize>())), None)
            .await?;
        Ok(())
    }
}

struct ExampleRandomSourceFactory;

#[async_trait]
impl SourceFactoryTrait for ExampleRandomSourceFactory {
    async fn new_source(
        &self,
        _context: &mut Context,
        _configuration: &Option<Configuration>,
        mut outputs: Outputs,
    ) -> Result<Option<Arc<dyn Node>>> {
        let output = outputs
            .take("Random")
            .ok_or_else(|| zferror!(ErrorKind::NotFound))?;
        Ok(Some(Arc::new(ExampleRandomSource { output })))
    }
}

// Also generated by macro
export_source_factory!(register);

fn register() -> Result<Arc<dyn SourceFactoryTrait>> {
    Ok(Arc::new(ExampleRandomSourceFactory) as Arc<dyn SourceFactoryTrait>)
}
